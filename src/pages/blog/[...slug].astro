---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import BlogLayout from '../../layouts/BlogLayout.astro';
import { calculateReadingTimeFromHtml } from '../../lib/reading';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.id },
    props: post,
  }));
}

type Props = CollectionEntry<'blog'>;
const post = Astro.props as Props;

// Get all posts for navigation
const posts = await getCollection('blog');
const sorted = posts.slice().sort((a, b) => +b.data.pubDate - +a.data.pubDate);
const index = sorted.findIndex((p) => p.id === post.id);
const prev = index < sorted.length - 1
  ? { id: sorted[index + 1].id, title: sorted[index + 1].data.title }
  : null;
const next = index > 0
  ? { id: sorted[index - 1].id, title: sorted[index - 1].data.title }
  : null;

// Render blog content
const { Content } = await render(post);
const html = await Astro.slots.render('default');
const readingTimeMin = calculateReadingTimeFromHtml(html ?? '');
---

<BlogLayout
  {...post.data}
  prevPost={prev}
  nextPost={next}
  readingTimeMin={readingTimeMin}
>
  <Content />
</BlogLayout>
