---
import { slugifyTag } from '@lib/slug';
import type { Tool } from '@data/tools/tools';

export interface Props {
  tools: Tool[];
  title?: string;
  subtitle?: string;
}

const { tools, title = 'Explore by Category', subtitle = 'Jump into a group of tools tailored to specific tasks.' } = Astro.props as Props;

// Aggregate categories with counts
const categoryMap = new Map<string, { name: string; count: number }>();
for (const t of tools) {
  if (!t.category) continue;
  const name = t.category;
  const entry = categoryMap.get(name) ?? { name, count: 0 };
  entry.count += 1;
  categoryMap.set(name, entry);
}
const categories = Array.from(categoryMap.values())
  .map(c => ({ ...c, slug: slugifyTag(c.name) }))
  .sort((a, b) => a.name.localeCompare(b.name));

// Pick icons per category (fallback emoji)
function getIcon(name: string): string {
  const n = name.toLowerCase();
  if (n.includes('url') || n.includes('link')) return '🔗';
  if (n.includes('image') || n.includes('photo')) return '🖼️';
  if (n.includes('pdf') || n.includes('document')) return '📄';
  if (n.includes('security') || n.includes('privacy')) return '🛡️';
  if (n.includes('seo') || n.includes('marketing')) return '📈';
  if (n.includes('social')) return '💬';
  if (n.includes('text') || n.includes('content')) return '✍️';
  if (n.includes('developer') || n.includes('code')) return '💻';
  if (n.includes('conversion')) return '🔁';
  if (n.includes('fun') || n.includes('viral')) return '🎉';
  return '🧩';
}
---

<section class="space-y-6">
  <div class="flex items-end justify-between gap-3">
    <div>
      <h2 class="text-2xl font-bold mb-1">
        <span class="bg-gradient-to-r from-[var(--accent)] to-[var(--accent-dark)] bg-clip-text text-transparent">
          {title}
        </span>
      </h2>
      <p class="text-[var(--color-text-muted)]">{subtitle}</p>
    </div>
    <a href="/tools/categories" class="text-[var(--accent)] hover:underline whitespace-nowrap">See all</a>
  </div>

  <div class="gallery-grid">
    {categories.map(({ name, slug, count }) => (
      <a href={`/tools/categories/${slug}`} class="card group">
        <div class="icon">{getIcon(name)}</div>
        <div class="content">
          <div class="name">{name.replace(/-/g, ' ')}</div>
          <div class="meta">{count} {count === 1 ? 'tool' : 'tools'}</div>
        </div>
      </a>
    ))}
  </div>
</section>

<style>
.gallery-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 16px;
}

.card {
  display: flex;
  align-items: center;
  gap: 14px;
  padding: 16px 18px;
  border: 1px solid var(--color-border);
  border-radius: 16px;
  background: var(--color-bg-secondary);
  box-shadow: 0 4px 20px rgba(0,0,0,0.05);
  transition: transform 150ms ease, background 150ms ease, border-color 150ms ease, box-shadow 150ms ease;
  text-decoration: none;
  color: inherit;
}

.card:hover,
.card:focus-within {
  transform: translateY(-3px);
  background: var(--color-bg-elevated, rgba(255,255,255,0.05));
  border-color: var(--accent, #3b82f6);
  box-shadow: 0 6px 24px rgba(0,0,0,0.1);
  outline: none;
}

.icon {
  font-size: 1.8rem;
  line-height: 1;
}

.content .name {
  font-weight: 600;
  color: var(--color-text-primary);
}

.content .meta {
  font-size: 0.85rem;
  color: var(--color-text-muted);
}

/* Gradient title inherits same style as ToolCard */
h2 span {
  display: inline-block;
}
</style>
