---
import { slugifyTag } from '@lib/slug';
import CategoryCard from '@components/ui/categories/CategoryCard.astro';

export interface Tool {
  slug: string;
  title: string;
  description?: string;
  category?: string;
  popularity?: number;
}

export interface CategoryItem {
  name: string;
  slug: string;
  count: number;
  icon?: string;
}

export interface Props {
  tools?: Tool[];
  categories?: CategoryItem[];
  title?: string;
  subtitle?: string;
  variant?: 'sidebar' | 'page';
  maxItems?: number;
}

const {
  tools = [],
  categories: incomingCategories,
  title = 'Explore by Category',
  subtitle = 'Jump into a group of tools tailored to specific tasks.',
  variant = 'sidebar',
  maxItems,
} = Astro.props as Props;

type CatEntry = { name: string; count: number };

function buildCategories(fromTools: Tool[]): CategoryItem[] {
  const categoryMap = new Map<string, CatEntry>();
  for (const t of fromTools) {
    const raw = (t.category || '').trim();
    if (!raw) continue;
    const key = raw.toLowerCase();
    const entry = categoryMap.get(key) ?? { name: raw, count: 0 };
    entry.count += 1;
    categoryMap.set(key, entry);
  }
  return Array.from(categoryMap.values())
    .map(c => ({
      name: c.name,
      slug: slugifyTag(c.name),
      count: c.count,
    }))
    .sort((a, b) => a.name.localeCompare(b.name));
}

function iconForCategory(label: string): string {
  const s = label.toLowerCase();
  if (s.includes('code') || s.includes('dev')) return '🎨';
  if (s.includes('seo') || s.includes('marketing')) return '📈';
  if (s.includes('image') || s.includes('photo') || s.includes('media')) return '🖼️';
  if (s.includes('pdf') || s.includes('document') || s.includes('doc')) return '📄';
  if (s.includes('privacy') || s.includes('security')) return '🔒';
  if (s.includes('social')) return '💬';
  if (s.includes('text') || s.includes('content')) return '📝';
  if (s.includes('url') || s.includes('link')) return '🔗';
  if (s.includes('convert') || s.includes('conversion')) return '🔁';
  if (s.includes('fun') || s.includes('meme') || s.includes('viral')) return '🎉';
  return '🧩';
}

const allCategoriesRaw: CategoryItem[] =
  Array.isArray(incomingCategories) && incomingCategories.length
    ? incomingCategories.slice().sort((a, b) => a.name.localeCompare(b.name))
    : buildCategories(tools);

// Add icons where missing
const allCategories = allCategoriesRaw.map(c => ({
  ...c,
  icon: c.icon ?? iconForCategory(c.name),
}));

const categories =
  typeof maxItems === 'number' ? allCategories.slice(0, maxItems) : allCategories;

const isSidebar = variant === 'sidebar';
---

<section class={isSidebar ? 'space-y-3' : 'space-y-4'} aria-label="Tool categories">
  {!isSidebar && (
    <div class="flex items-end justify-between gap-3">
      <div>
        <h2 class="text-xl font-semibold mb-1">
          <span class="bg-gradient-to-r from-[var(--accent)] to-[var(--accent-dark)] bg-clip-text text-transparent">
            {title}
          </span>
        </h2>
        <p class="text-[var(--color-text-muted)] text-sm">{subtitle}</p>
      </div>
      <a href="/tools/categories" class="text-[var(--accent)] hover:underline whitespace-nowrap text-sm">See all</a>
    </div>
  )}

  {isSidebar && (
    <div class="flex items-center justify-between">
      <span class="text-sm font-semibold text-[var(--color-text-primary)]">Categories</span>
      <a href="/tools/categories" class="text-[var(--accent)] hover:underline text-xs">See all</a>
    </div>
  )}

  {categories.length === 0 ? (
    <p class="text-[var(--color-text-muted)]">No categories found.</p>
  ) : (
    isSidebar ? (
      <div class="flex flex-col gap-3">
        {categories.map(({ name, slug, count, icon }) => (
          <a
            href={`/tools/categories/${slug}`}
            class="flex items-center gap-3 p-2 rounded-md border border-gray-700 bg-[var(--color-bg-secondary)] hover:bg-[var(--color-bg-elevated)] transition text-[var(--color-text-primary)] text-sm font-medium"
            aria-label={`${name} category with ${count} ${count === 1 ? 'tool' : 'tools'}`}
          >
            <div class="text-lg">{icon}</div>
            <div class="flex flex-col leading-none">
              <span class="truncate max-w-[150px]">{name.replace(/-/g, ' ')}</span>
              <span class="text-xs text-[var(--color-text-muted)]">
                {count} {count === 1 ? 'tool' : 'tools'}
              </span>
            </div>
          </a>
        ))}
      </div>
    ) : (
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
        {categories.map(({ name, slug, count, icon }) => (
          <CategoryCard name={name} slug={slug} count={count} icon={icon} />
        ))}
      </div>
    )
  )}
</section>

<style>
/* Layout-specific tweaks are controlled via variant; cards inherit site variables */
</style>
