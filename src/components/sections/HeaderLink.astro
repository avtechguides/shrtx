---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'> & {
  exact?: boolean;           // when true, only exact matches are active
  external?: boolean;        // when true, force external link behavior (target, rel)
};

const {
  href = '/',
  class: className,
  exact = false,
  external,
  ...props
} = Astro.props as Props;

// Normalize helper: strip base, ensure leading slash, drop trailing slash (except root)
const normalize = (p: string) => {
  try {
    // Convert absolute URLs to pathname
    if (/^https?:\/\//i.test(p)) p = new URL(p).pathname;
  } catch {
    // ignore URL parsing errors; keep original p
  }

  const base = import.meta.env.BASE_URL || '/';
  // If pathname starts with base, remove it (keeping a leading slash)
  if (base !== '/' && p.startsWith(base)) p = '/' + p.slice(base.length);

  if (!p.startsWith('/')) p = '/' + p;
  if (p.length > 1 && p.endsWith('/')) p = p.slice(0, -1);
  return p;
};

const currentPath = normalize(Astro.url.pathname || '/');
const linkPath = normalize(String(href || '/'));

// Section path (top-level) for broader active state on subpages
const segs = currentPath.split('/').filter(Boolean);
const sectionPath = segs.length ? `/${segs[0]}` : '/';

// Determine active state
const isActive = exact ? (linkPath === currentPath) : (linkPath === currentPath || linkPath === sectionPath);
const ariaCurrent = isActive ? 'page' : undefined;

// External link detection (if not explicitly set)
const isExternal = typeof external === 'boolean'
  ? external
  : /^https?:\/\//i.test(String(href));
---

<a
  href={href}
  aria-current={ariaCurrent}
  class:list={[
    'header-link',
    className,
    { active: isActive }
  ]}
  {...(isExternal ? { target: '_blank', rel: 'noopener' } : {})}
  {...props}
>
  <slot />
</a>

<style>
  .header-link {
    display: inline-block;
    text-decoration: none;
    color: var(--foreground);
    opacity: .85;
    transition: color .2s ease, opacity .2s ease, text-decoration-thickness .2s ease;
  }
  .header-link:hover {
    color: var(--accent);
    opacity: 1;
  }
  .header-link.active {
    color: var(--accent);
    font-weight: 700;
    text-decoration: underline;
    text-underline-offset: 4px;
    text-decoration-thickness: 2px;
  }
</style>
