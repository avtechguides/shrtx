---
import { slugifyTag } from '@lib/slug';
import type { tools as toolsData } from '@data/tools/tools';

type Tool = typeof toolsData[number];

export interface Props {
  action?: string;           // form action, defaults to /search
  placeholder?: string;      // input placeholder
  tools?: Tool[];            // optional tools array to derive top categories
  popularCategories?: string[]; // explicit category names to feature
  maxPopular?: number;       // number of chips to show when deriving
}

const {
  action = '/search',
  placeholder = 'Search tools (e.g., URL shortener, QR, JSON)...',
  tools = [],
  popularCategories = [],
  maxPopular = 4,
} = Astro.props as Props;

// Build popular category list: explicit > derived from tools by count
let popular: { name: string; slug: string; count?: number }[] = [];
if (popularCategories.length) {
  popular = popularCategories.map((name) => ({ name, slug: slugifyTag(name) }));
} else if (tools.length) {
  const map = new Map<string, number>();
  for (const t of tools) {
    if (!t.category) continue;
    map.set(t.category, (map.get(t.category) ?? 0) + 1);
  }
  popular = Array.from(map.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, maxPopular)
    .map(([name, count]) => ({ name, slug: slugifyTag(name), count }));
}
---

<section aria-label="Search tools" class="mx-auto max-w-3xl">
  <div class="search-panel">
    <div class="search-input">
      <svg width="18" height="18" viewBox="0 0 24 24" aria-hidden="true" class="icon">
        <path fill="currentColor" d="M15.5 14h-.79l-.28-.27a6.471 6.471 0 0 0 1.57-4.23C16 6.01 13.99 4 11.5 4S7 6.01 7 9.5 9.01 15 11.5 15c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0s.41-1.08 0-1.49L15.5 14Zm-4 0C9.01 14 7 11.99 7 9.5S9.01 5 11.5 5 16 7.01 16 9.5 13.99 14 11.5 14Z"/>
      </svg>
      <form action={action} method="GET" class="w-full">
        <input
          type="search"
          name="q"
          placeholder={placeholder}
          class="input"
        />
      </form>
    </div>

    {popular.length > 0 && (
      <div class="suggestions" aria-label="Popular searches">
        <span>Popular:</span>
        <div class="chips">
          {popular.map(({ name, slug, count }) => (
            <a href={`/tools/categories/${slug}`} class="chip">
              {name.replace(/-/g, ' ')}{typeof count === 'number' ? ` â€¢ ${count}` : ''}
            </a>
          ))}
        </div>
      </div>
    )}
  </div>
</section>

<style>
.search-panel {
  border: 1px solid var(--color-border);
  background: var(--color-bg-secondary);
  border-radius: 14px;
  padding: 14px;
  box-shadow: 0 6px 24px rgba(0,0,0,0.25);
}
.search-input {
  display: flex;
  align-items: center;
  gap: 10px;
  background: var(--color-bg-primary);
  border: 1px solid var(--color-border);
  border-radius: 10px;
  padding: 10px 12px;
}
.search-input .icon {
  color: var(--color-text-muted);
  flex: 0 0 auto;
}
.input {
  width: 100%;
  background: transparent;
  border: 0;
  outline: none;
  color: var(--color-text-primary);
}
.input::placeholder {
  color: var(--color-text-muted);
}
.suggestions {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-top: 10px;
  flex-wrap: wrap;
}
.suggestions > span {
  font-size: 0.9rem;
  color: var(--color-text-muted);
}
.chips {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}
.chip {
  display: inline-block;
  font-size: 0.85rem;
  padding: 6px 10px;
  border: 1px solid var(--color-border);
  border-radius: 999px;
  background: var(--color-bg-primary);
  color: var(--color-text-secondary);
  transition: background .15s ease, border-color .15s ease, transform .15s ease;
}
.chip:hover {
  background: var(--color-bg-elevated, rgba(255,255,255,0.02));
  border-color: var(--accent);
  transform: translateY(-1px);
}
</style>
