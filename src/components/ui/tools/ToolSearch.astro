---
import ToolCard from '@components/ui/tools/ToolCard.astro';

export interface Tool {
  slug: string;
  title: string;
  description?: string;
  category?: string;
  popularity?: number;
}

export interface Props {
  action?: string;
  placeholder?: string;
  tools?: Tool[];
}

const {
  action = '/search',
  placeholder = 'URL shortener, QR, JSON...',
  tools = [],
} = Astro.props as Props;

// SSR state (left in case of server render fallback)
let searchTerm = "";
let results: Tool[] = [];
---

<section class="mx-auto w-full max-w-72 space-y-3"> <!-- ~18rem to fit sidebar -->
  <div class="search-panel">
    <form action={action} method="GET" class="search-input">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon">
        <circle cx="11" cy="11" r="7" />
        <line x1="21" y1="21" x2="16.65" y2="16.65" />
      </svg>
      <input
        id="tool-search-input"
        type="search"
        placeholder={placeholder}
        name="q"
        class="input"
        aria-label="Search tools"
        autocomplete="off"
        spellcheck="false"
      />
    </form>
  </div>

  <div id="tool-search-results" class="search-results grid grid-cols-1 gap-3 mt-3" hidden></div>
</section>

<style>
:root {
  --icon-color: #2c3e50;
}

@media (prefers-color-scheme: dark) {
  :root {
    --icon-color: #ff4d4d;
  }
  .search-panel {
    background: var(--color-bg-dark, #1e1e1e);
    border-color: #444;
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.6);
  }
  .input {
    color: var(--foreground, #fff);
  }
}

.search-panel {
  border: 1px solid var(--border, var(--color-border));
  background: var(--card, var(--color-bg-secondary));
  border-radius: 10px;
  padding: 8px 12px;
  box-shadow: 0 4px 12px rgba(31, 38, 135, 0.12);
}

.search-input {
  display: flex;
  align-items: center;
  gap: 6px;
  border: 1px solid var(--border, var(--color-border));
  border-radius: 8px;
  padding: 6px 10px;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.search-input:focus-within {
  border-color: #4f46e5;
  box-shadow: 0 0 8px rgba(79, 70, 229, 0.6);
}

.search-input .icon {
  color: var(--icon-color);
  flex: 0 0 auto;
  width: 16px;
  height: 16px;
}

.input {
  width: 100%;
  border: none;
  outline: none;
  background: transparent;
  font-size: 0.875rem; /* smaller for sidebar */
  color: var(--foreground, var(--color-text-primary));
}

.search-results {
  margin-top: 0.75rem;
}
</style>

<!-- Client script: attach input listener without TS attribute issues -->
<script type="module">
  const input = document.getElementById('tool-search-input');
  const resultsEl = document.getElementById('tool-search-results');

  // Tools data passed via inline script below
  const toolsScript = document.querySelector('script[data-tools]');
  const toolsStr = toolsScript ? toolsScript.getAttribute('data-tools') : '[]';
  let tools = [];
  try { tools = JSON.parse(toolsStr || '[]'); } catch { tools = []; }

  function filterTools(term) {
    const q = String(term || '').trim().toLowerCase();
    if (!q) return [];
    return tools.filter(t => {
      const title = (t.title || '').toLowerCase();
      const desc = (t.description || '').toLowerCase();
      const cat = (t.category || '').toLowerCase();
      return title.includes(q) || desc.includes(q) || cat.includes(q);
    });
  }

  function render(list) {
    if (!(resultsEl instanceof HTMLElement)) return;
    const hasQuery = input && input instanceof HTMLInputElement && input.value.trim().length > 0;
    resultsEl.hidden = !hasQuery;
    if (!hasQuery) {
      resultsEl.innerHTML = '';
      return;
    }
    if (!Array.isArray(list) || list.length === 0) {
      resultsEl.innerHTML = '<p class="text-[var(--color-text-muted)] col-span-full">No results found.</p>';
      return;
    }
    // Lightweight card rendering to avoid hydrating ToolCard on client
    resultsEl.innerHTML = list.map(t => `
      <a class="block border rounded-md p-3 hover:border-[var(--accent,#4f46e5)] transition-colors"
         href="/tools/${t.slug}">
        <div class="font-medium text-sm">${t.title ?? ''}</div>
        ${t.description ? `<div class="text-xs text-[var(--color-text-muted)] mt-1">${t.description}</div>` : ''}
      </a>
    `).join('');
  }

  if (input instanceof HTMLInputElement) {
    input.addEventListener('input', () => {
      const list = filterTools(input.value);
      render(list);
    });
  }
</script>

<!-- Inline data payload for client script -->
<script is:inline data-tools={JSON.stringify(tools)}></script>
