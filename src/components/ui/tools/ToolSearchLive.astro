---
import { slugifyTag } from '@lib/slug';
import type { tools as toolsData } from '@data/tools/tools';

type Tool = typeof toolsData[number];

export interface Props {
  action?: string;
  placeholder?: string;
  tools?: Tool[];
  popularCategories?: string[];
  maxPopular?: number;
}

const {
  action = '/search',
  placeholder = 'Search tools (e.g., URL shortener, QR, JSON)...',
  tools = [],
  popularCategories = [],
  maxPopular = 4,
} = Astro.props as Props;

// Build popular categories list
let popular: { name: string; slug: string; count?: number }[] = [];
if (popularCategories.length) {
  popular = popularCategories.map((name: string) => ({ name, slug: slugifyTag(name) }));
} else if (tools.length) {
  const map = new Map<string, number>();
  for (const t of tools) {
    if (!t.category) continue;
    map.set(t.category, (map.get(t.category) ?? 0) + 1);
  }
  popular = Array.from(map.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, maxPopular)
    .map(([name, count]: [string, number]) => ({ name, slug: slugifyTag(name), count }));
}

// Live search state
let searchTerm: string = '';
let results: Tool[] = tools;

const handleInput = (e: Event) => {
  const target = e.target as HTMLInputElement;
  searchTerm = target.value.trim().toLowerCase();
  results = tools.filter((tool) =>
    tool.title.toLowerCase().includes(searchTerm) ||
    tool.description?.toLowerCase().includes(searchTerm) ||
    tool.category?.toLowerCase().includes(searchTerm)
  );
};
---

<section aria-label="Search tools" class="mx-auto max-w-3xl">
  <div class="search-panel">
    <div class="search-input">
      <svg
        width="18"
        height="18"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        aria-hidden="true"
        class="icon"
      >
        <circle cx="11" cy="11" r="7" />
        <line x1="21" y1="21" x2="16.65" y2="16.65" />
      </svg>
      <input
        type="search"
        placeholder={placeholder}
        class="input"
        value={searchTerm}
        onInput={handleInput}
        aria-label="Search tools"
        autocomplete="off"
        spellcheck="false"
      />
    </div>

    {popular.length > 0 && (
      <div class="suggestions" aria-label="Popular searches">
        <span>Popular:</span>
        <div class="chips">
          {popular.map(({ name, slug, count }) => (
            <a href={`/tools/categories/${slug}`} class="chip" tabindex="0">
              {name.replace(/-/g, ' ')}
              {typeof count === 'number' ? ` â€¢ ${count}` : ''}
            </a>
          ))}
        </div>
      </div>
    )}

    {searchTerm && (
      <div class="search-results mt-4">
        {results.length > 0 ? (
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {results.map((tool: Tool) => (
              <ToolCard {...tool} />
            ))}
          </div>
        ) : (
          <p class="text-[var(--color-text-muted)] mt-2">No tools found for "{searchTerm}"</p>
        )}
      </div>
    )}
  </div>
</section>

<style>
/* Panel & input */
.search-panel {
  border: 1px solid var(--border, var(--color-border));
  background: var(--card, var(--color-bg-secondary));
  border-radius: 12px;
  padding: 12px 16px;
  box-shadow: 0 6px 18px rgba(31,38,135,0.12);
}

.search-input {
  display: flex;
  align-items: center;
  gap: 8px;
  background: rgba(255 255 255 / 0.12);
  border: 1px solid var(--border, var(--color-border));
  border-radius: 10px;
  padding: 8px 12px;
  backdrop-filter: blur(6px);
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.search-input:focus-within {
  border-color: #4f46e5;
  box-shadow: 0 0 12px #4f46e5;
}

.input {
  width: 100%;
  border: none;
  outline: none;
  background: transparent;
  font-family: 'Inter', 'Roboto', sans-serif;
  font-size: 1rem;
  color: var(--foreground, var(--color-text-primary));
}

/* Popular chips */
.chips {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
  margin-top: 8px;
}

.chip {
  padding: 6px 10px;
  border-radius: 1rem;
  background: var(--card);
  border: 1px solid var(--border);
  box-shadow: 0 4px 20px rgba(0,0,0,0.05);
  font-weight: 500;
  text-decoration: none;
  color: var(--foreground);
  cursor: pointer;
  transition: transform 150ms ease, box-shadow 150ms ease, border-color 150ms ease;
}

.chip:hover, .chip:focus-visible {
  transform: translateY(-2px);
  box-shadow: 0 6px 24px rgba(59,130,246,0.3);
  border-color: var(--accent);
  outline: none;
}

/* Search results grid */
.search-results {
  margin-top: 16px;
}

@media (max-width: 640px) {
  .search-input { flex-direction: column; align-items: stretch; gap: 6px; }
  .chips { justify-content: flex-start; gap: 6px; }
  .search-results .grid { grid-template-columns: 1fr !important; }
}
</style>
