---
---
<button type="button" class="sw-btn-sm no-underline flex items-center gap-1" aria-label="Toggle theme" aria-pressed="false" data-theme-toggle>
  <span class="sr-only">Toggle theme</span>
  <span class="theme-icon" aria-hidden="true">
    <svg class="icon-sun" viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="4"/><path d="M12 2v2M12 20v2M4.93 4.93l1.41 1.41M17.66 17.66l1.41 1.41M2 12h2M20 12h2M4.93 19.07l1.41-1.41M17.66 6.34l1.41-1.41"/></svg>
    <svg class="icon-moon" viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/></svg>
    <svg class="icon-system" viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 6h18M3 18h18M4 6l2 12h12l2-12"/></svg>
  </span>
  <span class="label">Theme</span>
</button>

<!-- Early inline script (safe to duplicate on page; no-op after first) -->
<script is:inline>
(function () {
  const storageKey = 'theme';
  const root = document.documentElement;
  const mql = window.matchMedia('(prefers-color-scheme: dark)');
  const saved = localStorage.getItem(storageKey);

  function computeMode() {
    if (saved === 'dark' || saved === 'light' || saved === 'system') return saved;
    return 'system';
  }
  function computeIsDark(mode) {
    return mode === 'dark' || (mode === 'system' && mql.matches);
  }
  const mode = computeMode();
  const dark = computeIsDark(mode);
  root.dataset.theme = dark ? 'dark' : 'light';
  root.classList.toggle('dark', dark);
})();
</script>

<script is:inline>
(function () {
  const storageKey = 'theme';
  const root = document.documentElement;
  const btn = document.querySelector('[data-theme-toggle]');
  const mql = window.matchMedia('(prefers-color-scheme: dark)');
  const modes = ['system', 'dark', 'light'];

  function read() {
    const v = localStorage.getItem(storageKey);
    return v === 'dark' || v === 'light' || v === 'system' ? v : 'system';
  }
  function isDark(mode) {
    return mode === 'dark' || (mode === 'system' && mql.matches);
  }
  function apply(mode) {
    const dark = isDark(mode);
    root.dataset.theme = dark ? 'dark' : 'light';
    root.classList.toggle('dark', dark);
    btn?.setAttribute('aria-pressed', String(dark));
    root.dataset.themeMode = mode; // optional debugging hook
  }

  let mode = read();
  apply(mode);

  btn?.addEventListener('click', () => {
    const idx = modes.indexOf(mode);
    mode = modes[(idx + 1) % modes.length];
    localStorage.setItem(storageKey, mode);
    apply(mode);
  });

  // Live update when in system mode
  mql.addEventListener?.('change', () => {
    if (mode === 'system') apply(mode);
  });
})();
</script>

<style is:inline>
  /* Default to sun; swap per mode */
  [data-theme-toggle] .icon-moon, [data-theme-toggle] .icon-system { display: none; }
  html[data-theme="dark"] [data-theme-toggle] .icon-sun { display: none; }
  html[data-theme="dark"] [data-theme-toggle] .icon-moon { display: inline; }
  /* When in system mode, show system glyph (using data attribute set by script) */
  html[data-theme="light"][data-theme-mode="system"] [data-theme-toggle] .icon-sun { display: none; }
  html[data-theme="dark"][data-theme-mode="system"] [data-theme-toggle] .icon-moon { display: none; }
  html[data-theme-mode="system"] [data-theme-toggle] .icon-system { display: inline; }
</style>
