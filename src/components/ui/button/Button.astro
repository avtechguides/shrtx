---
import type { HTMLAttributes } from 'astro/types';

type Variant = 'primary' | 'secondary' | 'ghost' | 'outline';
type Size = 'sm' | 'md' | 'lg';

// Anchor props when rendering <a>
type AnchorAttrs = HTMLAttributes<'a'> & {
  href: string;
  type?: never; // not applicable on anchors
};

// Button props when rendering <button>
type ButtonAttrs = HTMLAttributes<'button'> & {
  href?: undefined;
  type?: 'button' | 'submit' | 'reset';
};

type Common = {
  variant?: Variant;
  size?: Size;
  disabled?: boolean;
  class?: string;
  fullWidth?: boolean;
  ariaLabel?: string;
};

type Props = Common & (AnchorAttrs | ButtonAttrs);

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  class: className,
  fullWidth = false,
  ariaLabel,
  ...rest
} = Astro.props as Props;

const Tag = href ? 'a' : 'button';

const base = [
  'inline-flex items-center justify-center font-semibold no-underline select-none align-middle',
  'rounded-lg',
  'transition duration-300',
  'transform-gpu',
  'focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-4 focus-visible:outline-[var(--focus-ring)]',
  fullWidth ? 'w-full' : '',
].join(' ');

const sizes: Record<Size, string> = {
  sm: 'px-3 py-2 text-sm',
  md: 'px-4 py-2.5 text-base',
  lg: 'px-5 py-3 text-lg',
};

const variants: Record<Variant, string> = {
  primary: [
    'bg-[var(--primary)] text-[var(--primary-foreground)]',
    'hover:bg-[var(--primary-hover,var(--accent-dark))] hover:shadow-lg hover:scale-[1.02]',
    'active:scale-[0.98] active:shadow-md',
    'shadow-sm',
  ].join(' '),

  secondary: [
    'bg-[color:var(--accent)/0.12] text-[var(--accent)]',
    'border border-[color:var(--accent)/0.25]',
    'hover:bg-[color:var(--accent)/0.18] hover:shadow-md hover:scale-[1.02]',
    'active:scale-[0.98]',
  ].join(' '),

  ghost: [
    'bg-transparent text-[var(--foreground)]',
    'hover:bg-[var(--muted)] hover:shadow-sm',
    'active:scale-[0.98]',
  ].join(' '),

  outline: [
    'bg-transparent text-[var(--foreground)]',
    'border border-[var(--border)]',
    'hover:bg-[var(--muted)] hover:shadow-sm',
    'active:scale-[0.98]',
  ].join(' '),
};

const disabledClass = 'opacity-60 cursor-not-allowed pointer-events-none';

const classes = [
  base,
  sizes[size],
  variants[variant],
  disabled ? disabledClass : '',
  className,
].filter(Boolean).join(' ');
---

<Fragment>
  {href ? (
    <a
      class={classes}
      href={disabled ? undefined : href}
      aria-disabled={disabled ? 'true' : undefined}
      aria-label={ariaLabel}
      {...rest}
    >
      <slot />
    </a>
  ) : (
    <button
      class={classes}
      type={type}
      disabled={disabled}
      aria-label={ariaLabel}
      {...rest}
    >
      <slot />
    </button>
  )}
</Fragment>

<style>
/* The colors and shadows are controlled via CSS vars globally */
</style>
