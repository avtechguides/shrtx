---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import Seo from '../components/Seo.astro';
import Footer from '../components/sections/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/sections/Header.astro';
import PostMeta from '../components/ui/meta/PostMeta.astro';
import ShareButtons from '../components/ui/share/ShareButtons.astro';
import PostNav from '../components/ui/nav/PostNav.astro';

// Types
type BlogEntry = CollectionEntry<'blog'>;
type BlogData = BlogEntry['data'];
import type { ImageMetadata } from 'astro'; // for heroImage typing

type NavLink = { id: string; title: string } | null;

type Props = BlogData & {
  showHeader?: boolean;
  prevPost?: NavLink;
  nextPost?: NavLink;
  readingTimeMin?: number;
};

// Props
const {
  title,
  description,
  pubDate,
  updatedDate,
  heroImage,
  showHeader = true,
  prevPost = null,
  nextPost = null,
  readingTimeMin = 0,
  author = 'Site Author'
} = Astro.props as Props;

// Derived
const canonicalPath = Astro.url.pathname;
const canonicalUrl = Astro.url.toString();

// Ensure heroImage works with astro:assets. If schema uses image(), heroImage is ImageMetadata.
const hero: ImageMetadata | null = (heroImage as unknown as ImageMetadata) ?? null;
---
<html lang="en" data-theme="dark" class="dark">
  <head>
    <Seo
      title={title}
      description={description}
      path={canonicalPath}
      image={hero ?? undefined}
      type="blog"
      entry={{
        collection: 'blog',
        slug: canonicalPath,
        // pass only serializable, minimal data needed by Seo to avoid SSR import issues
        data: { title, description, pubDate, updatedDate }
      }}
    />
  </head>
  <body>
    <Header />
    <main>
      <article>
        {showHeader && (
          <div class="hero-image">
            {hero && <Image width={1020} height={510} src={hero} alt={title} />}
          </div>
        )}
        <div class="prose">
          {showHeader && (
            <div class="title">
              <div class="date">
                <FormattedDate date={pubDate} />
                {updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )}
              </div>
              <h1>{title}</h1>
              <hr />
            </div>
          )}
          <ShareButtons title={title} url={canonicalUrl} />
          <PostMeta pubDate={pubDate} readingTimeMin={readingTimeMin} authorName={author} />
          <slot />
          <PostNav prev={prevPost} next={nextPost} />
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>

<style>
  main {
    width: 1280px;
    max-width: calc(100% - 2em);
    margin: auto;
    background: var(--color-bg-primary);
  }
  .hero-image { width: 100%; }
  .hero-image img {
    display: block;
    margin: 0 auto;
    border-radius: 12px;
    box-shadow: var(--box-shadow);
  }
  .prose {
    width: 100%;
    max-width: 870px;
    margin: auto;
    padding: 0.05em;
    color: var(--color-text-secondary);
  }
  .title {
    margin-bottom: 1em;
    padding: 1em 0;
    text-align: center;
    line-height: 1;
  }
  .title h1 {
    margin: 0 0 0.5em 0;
    color: var(--color-text-primary);
  }
  .date { margin-bottom: 0.5em; color: var(--color-text-muted); }
  .last-updated-on { font-style: italic; }
</style>
